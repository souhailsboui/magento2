<?php

namespace Biztech\Ausposteparcel\Controller\Adminhtml\Consignment;

use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\View\Result\PageFactory;
use Magento\Framework\App\Config\ScopeConfigInterface;

class MassGenerateReturnLabels extends Action
{
    public $order;
    public $consignmentmodel;
    public $apimodel;
    protected $pdf_manager;

    public function __construct(
        Context $context,
        PageFactory $resultPageFactory,
        \Magento\Sales\Api\Data\OrderInterface $order,
        \Biztech\Ausposteparcel\Model\Consignment $consignmentmodel,
        \Biztech\Ausposteparcel\Model\Api $apimodel,
        \Clegginabox\PDFMerger\PDFMerger $pdfmanager
        
    ) {
        parent::__construct($context);
        $this->messageManager = $context->getMessageManager();
        $this->order = $order;
        $this->consignmentmodel = $consignmentmodel;
        $this->apimodel = $apimodel;
        $this->pdf_manager = $pdfmanager;

    }

    public function execute()
    {
        $getParams = $this->getRequest()->getParams();
        $ids = $getParams['order_consignment'];
        if (!isset($ids)) {
            $this->messageManager->addError(__('Please select item(s)'));
            $this->_redirect('*/*/index');
            return true;
        } else {
            foreach ($ids as $key => $value) {
                $order_ids[] = explode('_', $value);
            }
            $shipmentReturnData = array();
            foreach ($order_ids as $key => $value) {
                $getReturnId = $this->order->load($value[0])->getEparcelReturnlabelShippingId();
                if ($getReturnId != '') {
                    $shipmentReturnData[$key]['shipmentId'] = $getReturnId;
                    $shipmentReturnData[$key]['consignment_id'] = $value[1];
                } else {
                    $ignoreLabels[] = $value[1];
                }
            }
            if (empty($shipmentReturnData)) {
                $this->messageManager->addError(__('There is no any consignment to generate return label'));
                $this->_redirect('*/*/index');
            }
            $finalDataToSend = array('shipment_id' => $shipmentReturnData);
            $getResponse = $this->apimodel->massLabelGenerateAndDownload($finalDataToSend, $returnLabel = 1);
            
            $this->jsonHelper = $this->_objectManager->get('Magento\Framework\Json\Helper\Data');
            $decodeResponse = $this->jsonHelper->jsonDecode($getResponse, true);
            foreach ($decodeResponse as $key => $value) {
                if ($key == 'status' && $value == 'success' || $key == 'url') {
                    if (is_array($value)) {
                        $consignmentsLabels = $value;
                    }
                }
            }
            $finalArray = array();
            foreach ($consignmentsLabels as $key => $value) {
                $labelUrl = $value['pdf_url'];
                if (in_array($labelUrl, $finalArray)) {
                    continue;
                } else {
                    array_push($finalArray, $labelUrl);
                }
            }

            $fileSystem = $this->_objectManager->create('\Magento\Framework\Filesystem');
            $filePath = $fileSystem->getDirectoryRead(\Magento\Framework\App\Filesystem\DirectoryList::MEDIA)->getAbsolutePath();
            $dir = $filePath . 'biztech/eParcelPdf';
            if (!is_dir($dir)) {
                mkdir($dir, 0777, true);
            }

            foreach ($finalArray as $i => $j) {
                $name = $i + 1;
                $dirPath = $dir . DS . $name . ".pdf";
                $labelPath = $j;
                file_put_contents($dirPath, file_get_contents($labelPath));
                $fileArray[] = $dirPath;
            }

            $outputName = $dir . "/" . time() . "_Labels.pdf";

//            foreach ($_FILES['file']['type'] as $key => $value) {
//                $filename = $_FILES['file']['name'][$key];
//            }

            $cmd = "gs -q -dPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=$outputName ";
            //Add each pdf file to the end of the command
            $fileName = implode(',', $fileArray);
            foreach ($fileArray as $file) {
                $cmd .= $file . " ";
            }
            // $result = shell_exec($cmd);
            foreach ($fileArray as $file) {
                $this->pdf_manager->addPDF($file, 'all');
            }
            $this->pdf_manager->merge('file', $outputName, 'P');


            $filenameFinal = "ReturnLabels-" . $fileName . ".pdf";
            $pdfurl = $outputName;
            $content = file_get_contents($pdfurl);
            foreach ($fileArray as $key => $value) {
                if (file_exists($value)) {
                    unlink($value);
                }
            }
            return $this->_sendUploadResponse($filenameFinal, $content);
        }
    }

    public function _sendUploadResponse($fileName, $content, $contentType = 'application/pdf')
    {
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $response = $objectManager->get('\Magento\Framework\App\ResponseInterface');
        $response->setHttpResponseCode(200);
        $response->setHeader('Pragma', 'public', true);
        $response->setHeader('Cache-Control', 'must-revalidate, post-check=0, pre-check=0', true);
        $response->setHeader('Content-Disposition', 'attachment; filename=' . $fileName);
        $response->setHeader('Last-Modified', date('r'));
        $response->setHeader('Accept-Ranges', 'bytes');
        $response->setHeader('Content-Length', strlen($content));
        $response->setHeader('Content-type', $contentType);
        $response->setBody($content);
        $response->sendResponse();
        return;
    }
}
